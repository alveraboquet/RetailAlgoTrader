datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?        @db.VarChar(255)
  email            String?        @db.VarChar(255) @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  User_Chapter     User_Chapter[]
  User_Lesson      User_Lesson[]
  User_Course      User_Course[]
  stripeCustomerId String?        @unique
  isPro            Boolean        @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chapter {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255) @unique
  course_id      Int              
  course         Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson         Lesson[]         
  User_Chapter   User_Chapter[]
}

model Lesson {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  chapter_id  Int
  chapter     Chapter       @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  User_Lesson User_Lesson[]
}

model User_Chapter {
  user_id    String
  chapter_id Int
  completed  Boolean
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chapter    Chapter @relation(fields: [chapter_id], references: [id], onDelete: Cascade)

  @@id([user_id, chapter_id])
}

model User_Lesson {
  user_id   String
  lesson_id Int
  completed Boolean
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson    Lesson  @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@id([user_id, lesson_id])
}

model Course {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255) @unique
  pro_course     Boolean
  User_Course    User_Course[]
  chapter        Chapter[]
}

model User_Course {
  user_id         String
  course_id       Int
  enrolled        Boolean
  completed       Boolean
  current_chapter String
  current_lesson  String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([user_id, course_id])
}
